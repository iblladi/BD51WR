--ARTICLE_LOOKUP

-- Clé primaires doubles
SELECT 
    AL.ARTICLE_CODE "ARTICLE_CODE",
    COUNT(AL.ARTICLE_CODE) "Nombre de clés primaires"
FROM
    ARTICLE_LOOKUP AL
GROUP BY
    AL.ARTICLE_CODE
HAVING 
    COUNT(AL.ARTICLE_CODE) > 1
ORDER BY
    1 ASC;
	

-- Table de rejet
CREATE TABLE ARTICLE_LOOKUP_TREJ AS
 (SELECT *
 FROM
	ARTICLE_LOOKUP 
 WHERE 
	0=1
);
	
-- Insertion des données rejetées
INSERT INTO ARTICLE_LOOKUP_TREJ(
	ARTICLE_CODE
	,ARTICLE_LABEL
	,CATEGORY
	,SALE_PRICE
	,FAMILY_NAME
	,FAMILY_CODE)
SELECT
	AL.ARTICLE_CODE
	,AL.ARTICLE_LABEL
	,AL.CATEGORY
	,AL.SALE_PRICE
	,AL.FAMILY_NAME
	,AL.FAMILY_CODE
FROM
	ARTICLE_LOOKUP AL
WHERE
	AL.ARTICLE_CODE IN
	(SELECT
		ALS.ARTICLE_CODE 
	FROM
		ARTICLE_LOOKUP ALS
	GROUP BY
		ALS.ARTICLE_CODE
	HAVING
		COUNT(ALS.ARTICLE_CODE)>1);
COMMIT; 


--ARTICLE_COLOR_LOOKUP

-- Clé primaires doubles

SELECT 
	ACL.ARTICLE_CODE AS "Article code"
	,ACL.COLOR_CODE AS "Color code"
	,CONCAT(ACL.ARTICLE_CODE,ACL.COLOR_CODE) AS "Article_Color_Code"
	,COUNT(CONCAT(ACL.ARTICLE_CODE,ACL.COLOR_CODE)) AS "Nombre de clés primaires"
FROM 
	ARTICLE_COLOR_LOOKUP ACL 
GROUP BY
	ACL.ARTICLE_CODE 
	,ACL.COLOR_CODE
	,CONCAT(ACL.ARTICLE_CODE,ACL.COLOR_CODE)
HAVING 
	COUNT(CONCAT(ACL.ARTICLE_CODE,ACL.COLOR_CODE))  > 1 
ORDER BY 1 ASC;

--Clés étrangères manquantes--/

-- Table de rejet
CREATE TABLE ARTICLE_COLOR_LOOKUP_TREJ AS (
	SELECT * 
	FROM 
		ARTICLE_COLOR_LOOKUP 
	WHERE 
		0=1
);

-- Insertion des données rejetées 
INSERT INTO ARTICLE_COLOR_LOOKUP_TREJ(ARTICLE_CODE, COLOR_CODE, ARTICLE_LABEL, COLOR_LABEL, CATEGORY, SALE_PRICE, FAMILY_NAME, FAMILY_CODE)
SELECT 
	ACL.ARTICLE_CODE
	,ACL.COLOR_CODE
	,ACL.ARTICLE_LABEL
	,ACL.COLOR_LABEL
	,ACL.CATEGORY
	,ACL.SALE_PRICE
	,ACL.FAMILY_NAME
	,ACL.FAMILY_CODE
FROM
	ARTICLE_COLOR_LOOKUP ACL 
WHERE 
	CONCAT(ACL.ARTICLE_CODE,ACL.COLOR_CODE) IN ( 

	SELECT 
		CONCAT(ACLS.ARTICLE_CODE,ACLS.COLOR_CODE)
	FROM ARTICLE_COLOR_LOOKUP ACLS
	GROUP BY 
		CONCAT(ACLS.ARTICLE_CODE,ACLS.COLOR_CODE)
	HAVING 
		COUNT(CONCAT(ACLS.ARTICLE_CODE,ACLS.COLOR_CODE)) > 1);
		
COMMIT;

--CALENDAR_YEAR_LOOKUP

--Clés primaires doubles

SELECT
	CYL.WEEK_KEY "Week key"
	,COUNT(CYL.WEEK_KEY) "Nombre de clés primaires"
FROM
	CALENDAR_YEAR_LOOKUP CYL
GROUP BY
	CYL.WEEK_KEY
HAVING
	COUNT(CYL.WEEK_KEY) > 1
ORDER BY
1 ASC
;

--Clés étrangères manquantes--/

--Table de rejet

CREATE TABLE CALENDAR_YEAR_LOOKUP_TREJ 
AS (SELECT * 
	FROM 
		CALENDAR_YEAR_LOOKUP 
	WHERE 
		0=1
);


INSERT INTO CALENDAR_YEAR_LOOKUP_TREJ(WEEK_KEY, WEEK_IN_YEAR, YEAR, FISCAL_PERIOD, YEAR_WEEK,QUARTER, MONTH_NAME , MONTH , HOLIDAY_FLAG)
SELECT
	CYL.WEEK_KEY
	, CYL.WEEK_IN_YEAR
	, CYL.YEAR
	, CYL.FISCAL_PERIOD
	, CYL.YEAR_WEEK
	, CYL.QUARTER
	, CYL.MONTH_NAME 
	, CYL.MONTH 
	, CYL.HOLIDAY_FLAG
FROM
	CALENDAR_YEAR_LOOKUP CYL
WHERE
	CYL.WEEK_KEY IN(SELECT 
						CYLS.WEEK_KEY 
					FROM
						CALENDAR_YEAR_LOOKUP CYLS
					GROUP BY CYLS.WEEK_KEY 
					HAVING
						COUNT(CYLS.WEEK_KEY )>1);
COMMIT;


--OUTLET_LOOKUP

--Clés primaires doubles
SELECT 
	OL.SHOP_CODE AS "Shop_Code"
	, COUNT(OL.SHOP_CODE) AS "Nombre de clés primaires"
FROM 
	OUTLET_LOOKUP OL
GROUP BY
	OL.SHOP_CODE
	HAVING
		COUNT(OL.SHOP_CODE) > 1 
ORDER BY 
	1 ASC;
	
--Clés étrangères manquantes--/

--Table de rejet des données invalides

CREATE TABLE OUTLET_LOOKUP_TREJ AS (
	SELECT * 
	FROM 
		EMODE.OUTLET_LOOKUP 
	WHERE 
		0=1
);

INSERT INTO OUTLET_LOOKUP_TREJ(SHOP_NAME , ADDRESS_1, MANAGER, DATE_OPEN , OPEN , OWNED_OUTRIGHT , FLOOR_SPACE , ZIP_CODE, CITY, STATE , SHOP_CODE) 

SELECT
	OL.SHOP_NAME 
	,OL.ADDRESS_1
	,OL.MANAGER
	,OL.DATE_OPEN 
	,OL.OPEN 
	,OL.OWNED_OUTRIGHT 
	,OL.FLOOR_SPACE 
	,OL.ZIP_CODE
	,OL.CITY
	,OL.STATE
	,OL.SHOP_CODE 
FROM
	OUTLET_LOOKUP OL
WHERE
	OL.SHOP_CODE IN (
	SELECT 
		OLS.SHOP_CODE 
	FROM
		OUTLET_LOOKUP OLS
	GROUP BY
		OLS.SHOP_CODE 
			HAVING
				COUNT(OLS.SHOP_CODE) > 1);

COMMIT;

--SHOP_FACTS

--Clés primaires en double
SELECT
	SH.ID AS "ID"
	, COUNT(SH.ID) AS "Nombre_PK"
FROM
	SHOP_FACTS SH
GROUP BY 
	SH.ID
		HAVING
			COUNT(SH.ID) > 1;

--Clés étrangères manquantes
--CALENDAR_YEAR_LOOKUP
SELECT
	SF.WEEK_KEY AS "Week_key"
	,COUNT(*) AS "Nombre_FK"
FROM
	SHOP_FACTS SF
WHERE 
	SF.WEEK_KEY NOT IN (
	SELECT DISTINCT
		CYL.WEEK_KEY
	FROM
		CALENDAR_YEAR_LOOKUP CYL
	)
GROUP BY
    SF.WEEK_KEY
ORDER BY 
	1 ASC;

--OUTLET_LOOKUP	
SELECT
	SF.SHOP_CODE AS "Shop Code"
	,COUNT(*) AS "Nombre_FK"
FROM
	SHOP_FACTS SF
WHERE
	SF.SHOP_CODE NOT IN (
	SELECT DISTINCT
		OL.SHOP_CODE
	FROM
		OUTLET_LOOKUP OL
	)
GROUP BY
	SF.SHOP_CODE
ORDER BY
	1 ASC;

--ARTICLE_COLOR_LOOKUP
--ARTICLE_LOOKUP
SELECT
	SF.COLOR_CODE AS "Color_Code" 
	,SF.ARTICLE_CODE AS "Article_Code"
	,COUNT(*) AS "Nombre_FK"
FROM
	SHOP_FACTS SF
WHERE
	CONCAT(SF.COLOR_CODE,SF.ARTICLE_CODE) NOT IN (
	SELECT DISTINCT 
		CONCAT(ACL.COLOR_CODE,ACL.ARTICLE_CODE)
	FROM
		ARTICLE_COLOR_LOOKUP ACL
	)
AND 
	SF.ARTICLE_CODE NOT IN (
	SELECT DISTINCT
		AL.ARTICLE_CODE
	FROM 
		ARTICLE_LOOKUP AL
	)
GROUP BY
	SF.COLOR_CODE
	,SF.ARTICLE_CODE
ORDER BY
	1 ASC;

	
--Table de rejet des données invalides
CREATE TABLE SHOP_FACTS_TREJ AS (
	SELECT * 
	FROM EMODE.SHOP_FACTS 
	WHERE 0=1);

INSERT INTO SHOP_FACTS_TREJ(ID, ARTICLE_CODE, COLOR_CODE, WEEK_KEY, SHOP_CODE, MARGIN, AMOUNT_SOLD, QUANTITY_SOLD)
SELECT 
	SF.ID
	, SF.ARTICLE_CODE
	, SF.COLOR_CODE
	, SF.WEEK_KEY
	, SF.SHOP_CODE
	, SF.MARGIN
	, SF.AMOUNT_SOLD
	, SF.QUANTITY_SOLD
FROM
	SHOP_FACTS SF
WHERE
	SF.ID IN (
	SELECT 
		SFS.ID 
	FROM
		SHOP_FACTS SFS
	GROUP BY SFS.ID
		HAVING
			COUNT(SFS.ID) > 1)
ORDER BY
	1 ASC;	

--CALENDAR_YEAR_LOOKUP
INSERT INTO SHOP_FACTS_TREJ(ID, ARTICLE_CODE, COLOR_CODE, WEEK_KEY, SHOP_CODE, MARGIN, AMOUNT_SOLD, QUANTITY_SOLD)
SELECT 
	SF.ID
	, SF.ARTICLE_CODE
	, SF.COLOR_CODE
	, SF.WEEK_KEY
	, SF.SHOP_CODE
	, SF.MARGIN
	, SF.AMOUNT_SOLD
	, SF.QUANTITY_SOLD
FROM
	SHOP_FACTS SF
WHERE
	SF.WEEK_KEY NOT IN (
	SELECT DISTINCT 
		CYL.WEEK_KEY
	FROM
		CALENDAR_YEAR_LOOKUP CYL
	)
ORDER BY
	1 ASC;

--ARTICLE_COLOR_LOOKUP
--ARTICLE_LOOKUP
INSERT INTO SHOP_FACTS_TREJ(ID, ARTICLE_CODE, COLOR_CODE, WEEK_KEY, SHOP_CODE, MARGIN, AMOUNT_SOLD, QUANTITY_SOLD)
SELECT
	SF.ID
	, SF.ARTICLE_CODE
	, SF.COLOR_CODE
	, SF.WEEK_KEY
	, SF.SHOP_CODE
	, SF.MARGIN
	, SF.AMOUNT_SOLD
	, SF.QUANTITY_SOLD 
FROM
	SHOP_FACTS SF
WHERE
	CONCAT(SF.COLOR_CODE,SF.ARTICLE_CODE) NOT IN (
	SELECT DISTINCT 
		CONCAT(ACL.COLOR_CODE,ACL.ARTICLE_CODE)
	FROM 
		ARTICLE_COLOR_LOOKUP ACL
	)
OR SF.ARTICLE_CODE NOT IN (
	SELECT DISTINCT 
		AL.ARTICLE_CODE
	FROM
		ARTICLE_LOOKUP AL
	)
ORDER BY 
	1 ASC;


	